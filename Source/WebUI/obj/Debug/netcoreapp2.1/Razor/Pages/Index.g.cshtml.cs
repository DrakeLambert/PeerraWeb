#pragma checksum "C:\Users\drake\Repositories\Peerra\Source\WebUI\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c399497865a1fd6c0614c1a0b0c3fb98d5aa0877"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Index.cshtml", typeof(AspNetCore.Pages_Index), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c399497865a1fd6c0614c1a0b0c3fb98d5aa0877", @"/Pages/Index.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(6, 1444, true);
            WriteLiteral(@"
<div class=""row justify-content-center"">
    <div class=""col-md-8"">
        <form class=""row justify-content-center"" onsubmit=""skillSearch(); return false;"">
            <div class=""col-md  mt-3"">
                <input id=""skillSearchTerms"" class=""form-control form-control-lg"" placeholder=""I'm looking for help with..."" type=""text"">
            </div>
            <div class=""col-md-auto mt-3"" style=""text-align: center"">
                <button class=""btn btn-primary form-control-lg"" type=""submit"">Get Connected</button>
            </div>
        </form>
    </div>
</div>

<div id=""connectionsAndRequests"" hidden=""true"">
    <hr>

    <div class=""row"">
        <div class=""col-lg"">
            <h3>My Connections</h3>
            <div class=""table-responsive"">
                <table hidden=""true"" class=""table"" id=""connections""></table>
                <p hidden=""true"" id=""noConnectionsMessage"">After you make some connections, they will appear here!</p>
            </div>
        </div>
        <div style=""border");
            WriteLiteral(@"-left:1px solid rgba(0,0,0,.1);""></div>
        <div class=""col-lg"">
            <h3>Incoming Connections</h3>
            <div class=""table-responsive"">
                <table hidden=""true"" class=""table"" id=""incomingConnections""></table>
                <p hidden=""true"" id=""noIncomingConnectionsMessage"">After you make some connections, they will appear here!</p>
            </div>
        </div>
    </div>
</div>


");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(1468, 3358, true);
                WriteLiteral(@"
<script>
    isLoggedIn().then(async value => {
        document.getElementById(""connectionsAndRequests"").hidden = !value;

        let response = await fetch(apiHost + ""Connections/Connections"", {
            method: ""GET"", // *GET, POST, PUT, DELETE, etc.,
            mode: ""cors"",
            headers: {
                ""Authorization"": ""Bearer "" + getAccessToken()
            }
        });
        let body = await response.json();

        if (response.ok) {
            let table = document.getElementById(""connections"");
            if (body.length > 0) {
                table.hidden = false;
                document.getElementById(""noConnectionsMessage"").hidden = true;
            }
            body.forEach(connection => {
                let row = table.insertRow();

                let userCell = row.insertCell();
                let userLink = document.createElement(""a"");
                userLink.href = ""/connection?id="" + connection.targetUsername;
                userLink.innerText = connection.targ");
                WriteLiteral(@"etUsername;
                userCell.appendChild(userLink);

                let statusCell = row.insertCell();
                let status = connection.status;
                statusCell.innerText = status;
                if (status === ""Accepted"") {
                    statusCell.classList.add(""text-success"");
                }
                if (status === ""Pending"") {
                    statusCell.classList.add(""text-warning"");
                }
                if (status === ""Declined"") {
                    statusCell.classList.add(""text-danger"");
                }
            });
        }

        response = await fetch(apiHost + ""Connections/IncomingConnections"", {
            method: ""GET"", // *GET, POST, PUT, DELETE, etc.,
            mode: ""cors"",
            headers: {
                ""Authorization"": ""Bearer "" + getAccessToken()
            }
        });
        body = await response.json();

        if (response.ok) {
            let table = document.getElementById(""incomingConnections"");
   ");
                WriteLiteral(@"         if (body.length > 0) {
                table.hidden = false;
                document.getElementById(""noIncomingConnectionsMessage"").hidden = true;
            }
            body.forEach(connection => {
                let row = table.insertRow();

                let userCell = row.insertCell();
                let userLink = document.createElement(""a"");
                userLink.href = ""/connection?id="" + connection.requestorUsername;
                userLink.innerText = connection.requestorUsername;
                userCell.appendChild(userLink);

                let statusCell = row.insertCell();
                let status = connection.status;
                statusCell.innerText = status;
                if (status === ""Accepted"") {
                    statusCell.classList.add(""text-success"");
                }
                if (status === ""Pending"") {
                    statusCell.classList.add(""text-warning"");
                }
                if (status === ""Declined"") {
                   ");
                WriteLiteral(@" statusCell.classList.add(""text-danger"");
                }
            });
        }
    });

    function skillSearch() {
        var searchTerms = document.getElementById(""skillSearchTerms"").value;
        window.location.href = ""/skillsearch?skills="" + searchTerms;
    }
</script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Index> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Index> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Index>)PageContext?.ViewData;
        public Pages_Index Model => ViewData.Model;
    }
}
#pragma warning restore 1591
