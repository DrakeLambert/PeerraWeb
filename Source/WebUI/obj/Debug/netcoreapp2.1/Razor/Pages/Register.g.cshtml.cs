#pragma checksum "C:\Users\drake\Repositories\Peerra\Source\WebUI\Pages\Register.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ae726e7fb77e28f96f8ba9a743b60d21c4d342a6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_Register), @"mvc.1.0.razor-page", @"/Pages/Register.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Register.cshtml", typeof(AspNetCore.Pages_Register), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ae726e7fb77e28f96f8ba9a743b60d21c4d342a6", @"/Pages/Register.cshtml")]
    public class Pages_Register : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(6, 2200, true);
            WriteLiteral(@"
<div class=""row justify-content-center"">
    <div class=""col-lg-5 col-md-8"">
        <h3 class=""mt-3"">Register</h3>
        <form onsubmit=""register(); return false;"">
            <div id=""errorMessage"" class=""text-danger""></div>
            <div class=""form-group"">
                <label>Username</label>
                <input id=""username"" type=""text"" class=""form-control"" placeholder=""Username"">
            </div>
            <div class=""form-group"">
                <label>Email</label>
                <input id=""email"" type=""email"" class=""form-control"" placeholder=""name@email.com"">
                <small class=""form-text text-muted"">When you connect with users, this is how they will contact you.</small>
            </div>
            <div class=""form-group"">
                <label>Password</label>
                <input id=""password1"" type=""password"" class=""form-control"" placeholder=""Password"">
                <input id=""password2"" type=""password"" class=""form-control mt-2"" placeholder=""Password one more t");
            WriteLiteral(@"ime"">
                <small class=""form-text text-muted"">Never share your password with anyone.</small>
            </div>
            <div class=""form-group"">
                <label>Bio</label>
                <textarea id=""bio"" class=""form-control"" placeholder=""I'm a senior at LSU in Computer Science, and I love dogs!""></textarea>
                <small class=""form-text text-muted"">Tell users a little about yourself.</small>
            </div>
            <div class=""form-group"">
                <label>Your Skills</label>
                <textarea id=""skills"" class=""form-control"" placeholder=""biology skateboarding business spanish football ...""></textarea>
                <small class=""form-text text-muted"">Add as many skills as you'd like! Try to use single words to describe your skills.</small>
            </div>
            <div class=""form-group form-check"">
                <input id=""staySignedIn"" type=""checkbox"" class=""form-check-input"">
                <label class=""form-check-label"">Stay signed in?");
            WriteLiteral("</label>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary mr-2\">Register & Login</button>\n        </form>\n    </div>\n</div>\n\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(2223, 2422, true);
                WriteLiteral(@"
<script>
    async function register() {
        let username = document.getElementById(""username"").value;
        let password = document.getElementById(""password1"").value;
        let password2 = document.getElementById(""password2"").value;

        if (password !== password2) {
            document.getElementById(""errorMessage"").innerHTML = ""Your passwords don't match :("";
            return;
        }

        let staySignedIn = document.getElementById(""staySignedIn"").checked;

        let request = {
            username: username,
            password: password,
            bio: document.getElementById(""bio"").value,
            skills: document.getElementById(""bio"").value.split("" ""),
            email: document.getElementById(""email"").value
        };

        let response = await fetch(apiHost + ""account/register"", {
            method: ""POST"", // *GET, POST, PUT, DELETE, etc.,
            mode: ""cors"",
            headers: {
                ""Content-Type"": ""application/json; charset=utf-8""
           ");
                WriteLiteral(@"     // ""Authenticate"": ""Bearer "" + accessToken
            },
            body: JSON.stringify(request)
        });

        let body = await response.json();
        
        if (!response.ok) {
            document.getElementById(""errorMessage"").innerHTML = body.error;
            return;
        }
        
        request = {
            username: username,
            password: password
        };
        
        response = await fetch(apiHost + ""account/access"", {
            method: ""POST"", // *GET, POST, PUT, DELETE, etc.,
            mode: ""cors"",
            headers: {
                ""Content-Type"": ""application/json; charset=utf-8""
                // ""Authenticate"": ""Bearer "" + accessToken
            },
            body: JSON.stringify(request)
        });
        
        body = await response.json();

        if (response.ok) {
            setAccessToken(body.accessToken.token);
            setRefreshToken(body.refreshToken.token);
            let returnAddress = new URLSearchParams(window.loc");
                WriteLiteral(@"ation.search).get(""return"");
            console.log(returnAddress);
            if (returnAddress) {
                window.location.href = returnAddress;
            }
            else {
                window.location.href = ""/"";
            }
        }
        else {
            document.getElementById(""errorMessage"").innerHTML = body.error;
        }
    }
</script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Register> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Register> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Register>)PageContext?.ViewData;
        public Pages_Register Model => ViewData.Model;
    }
}
#pragma warning restore 1591
